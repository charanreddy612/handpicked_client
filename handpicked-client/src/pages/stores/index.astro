---
import Base from "../../layouts/Base.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import CardStore from "../../components/CardStore.astro";
import Pagination from "../../components/Pagination.astro";
import { api } from "../../lib/api";

type Store = {
  id: string | number;
  name: string;
  slug: string;
  logo_url?: string | null;
  stats?: { active_coupons?: number };
};

type StoresResponse = {
  data: Store[];
  meta: {
    page?: number;
    limit?: number;
    total?: number;
    canonical?: string;
    prev?: string | null;
    next?: string | null;
    total_pages?: number;
    title?: string;
    description?: string;
  };
};

let resp: StoresResponse | null = null;
try {
  resp = await api.get<StoresResponse>(
    "/stores",
    {},
    { retries: 2, timeout: 8000 }
  );
} catch (e) {
  console.error("Error fetching stores:", e);
  // Safe fallback so UI doesnâ€™t break
  resp = { data: [], meta: { page: 1, limit: 20, total: 0, total_pages: 1 } };
}

const stores = resp?.data || [];
const meta = resp?.meta || {};
const pageTitle = meta.title || "Stores - HandPicked";
const pageDesc =
  meta.description || "Explore verified stores with handpicked coupons.";
const canonical = meta.canonical;
---

<Base meta={{ title: pageTitle, description: pageDesc, canonical }}>
  <Header />
  <main class="container py-10">
    <h1 class="text-2xl font-bold mb-6">Stores</h1>

    {
      stores.length > 0 ? (
        <div class="grid-3-equal gap-6">
          {stores.map((store) => (
            <CardStore store={store} />
          ))}
        </div>
      ) : (
        <p class="text-gray-600">No stores found.</p>
      )
    }

    <Pagination
      prev={meta.prev}
      next={meta.next}
      total_pages={meta.total_pages}
    />
  </main>
  <Footer />
</Base>
