---
import Base from "../../layouts/Base.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import CardCoupon from "../../components/CardCoupon.astro";
import Pagination from "../../components/Pagination.astro";
import CardStore from "../../components/CardStore.astro";
import { api } from "../../lib/api";

type Coupon = {
  id: string | number;
  title?: string | null;
  code?: string | null;
  ends_at?: string | null;
  merchant_name?: string | null;
  discount_text?: string | null; // optional: "15% OFF" if your API provides
};

type StoreDetail = {
  id: number | string;
  slug: string;
  name: string;
  logo_url?: string | null;
  category_names?: string[];
  about_html?: string | null;
  breadcrumbs?: { name: string; url: string }[];
  stats?: { active_coupons?: number };
  coupons?: {
    items: Coupon[];
    page?: number;
    limit?: number;
    total?: number;
    prev?: string | null;
    next?: string | null;
    total_pages?: number;
  };
  related_stores?: { id: string | number; name: string; slug: string; logo_url?: string | null }[];
  // Optional SEO fields if your backend returns them:
  seo_title?: string | null;
  seo_description?: string | null;
  canonical?: string | null;
  rating_value?: number | null;   // optional
  rating_count?: number | null;   // optional
  hero_image?: string | null;     // optional for OG
  brand_site?: string | null;     // optional
  last_updated?: string | null;   // ISO date
};

type StoreDetailResponse = {
  data: StoreDetail | null;
  meta?: {
    canonical?: string;
    jsonld?: any;
    title?: string;
    description?: string;
  };
};

const { slug } = Astro.params as { slug: string };

let resp: StoreDetailResponse | null = null;
try {
  resp = await api.get<StoreDetailResponse>(`/stores/${slug}`);
} catch (e) {
  resp = null;
}

const store = resp?.data || null;
const meta = resp?.meta || {};

const now = new Date();
const updated = store?.last_updated ? new Date(store.last_updated) : now;

function monthYear(d = new Date()) {
  return d.toLocaleString("en-US", { month: "long", year: "numeric" });
}

const pageTitle =
  meta?.title ||
  store?.seo_title ||
  (store?.name ? `${store.name} Coupons & Promo Codes | ${monthYear(now)}` : "Store Coupons & Deals");

const pageDesc =
  meta?.description ||
  store?.seo_description ||
  (store?.name
    ? `Verified ${store.name} coupons, promo codes & deals — updated ${monthYear(now)}.`
    : "Verified coupons, promo codes & deals — updated monthly.");

const canonical = meta?.canonical || store?.canonical || (Astro.site ? new URL(`/store/${slug}`, Astro.site).toString() : undefined);

// Helpers
const coupons = store?.coupons?.items ?? [];
const bestCoupon = (() => {
  if (!coupons.length) return null;
  // Prefer explicit discount_text -> fall back by guessing from title
  return coupons.reduce((best, c) => {
    const score =
      (c.discount_text?.match(/\d+/)?.[0] ? parseInt(c.discount_text!, 10) : 0) ||
      (c.title?.match(/(\d+)%/i)?.[1] ? parseInt(RegExp.$1, 10) : 0);
    const bestScore =
      (best?.discount_text?.match(/\d+/)?.[0] ? parseInt(best.discount_text!, 10) : 0) ||
      (best?.title?.match(/(\d+)%/i)?.[1] ? parseInt(RegExp.$1, 10) : 0);
    return score > bestScore ? c : best;
  }, coupons[0] as Coupon | null);
})();

function formatDate(d?: string | null) {
  if (!d) return "";
  const dt = new Date(d);
  if (isNaN(dt.getTime())) return "";
  return dt.toLocaleDateString("en-US", { year: "numeric", month: "short", day: "2-digit" });
}

// JSON-LD builders (robust even if backend doesn't send meta.jsonld)
const ldBreadcrumb =
  store?.breadcrumbs?.length
    ? {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        itemListElement: store.breadcrumbs.map((b, i) => ({
          "@type": "ListItem",
          position: i + 1,
          name: b.name,
          item: Astro.site ? new URL(b.url, Astro.site).toString() : b.url,
        })),
      }
    : null;

const ldBrand = store
  ? {
      "@context": "https://schema.org",
      "@type": "Brand",
      name: store.name,
      url: store.brand_site || (Astro.site ? new URL(`/store/${store.slug}`, Astro.site).toString() : undefined),
      logo: store.logo_url || undefined,
      aggregateRating:
        store.rating_value && store.rating_count
          ? {
              "@type": "AggregateRating",
              ratingValue: store.rating_value,
              reviewCount: store.rating_count,
            }
          : undefined,
    }
  : null;

const ldOffers =
  coupons.length
    ? {
        "@context": "https://schema.org",
        "@type": "OfferCatalog",
        name: `${store?.name ?? "Brand"} Coupons & Offers`,
        itemListElement: coupons.map((c) => ({
          "@type": "Coupon",
          name: c.title || "Coupon",
          description: c.title || undefined,
          discountCode: c.code || undefined,
          validThrough: c.ends_at || undefined,
          // Use store page URL as a generic target; components will handle affiliate links in UI
          url: Astro.site ? new URL(`/store/${slug}`, Astro.site).toString() : undefined,
        })),
      }
    : null;

// If backend already returns meta.jsonld, merge ours beneath (both are fine for Google).
const jsonldList = [
  ...(meta?.jsonld ? (Array.isArray(meta.jsonld) ? meta.jsonld : [meta.jsonld]) : []),
  ...(ldBreadcrumb ? [ldBreadcrumb] : []),
  ...(ldBrand ? [ldBrand] : []),
  ...(ldOffers ? [ldOffers] : []),
];
---

<Base meta={{ title: pageTitle, description: pageDesc, canonical, jsonld: jsonldList }}>
  <Header />

  <main class="container py-8 sm:py-10">
    {store ? (
      <>
        <!-- Breadcrumbs -->
        <Breadcrumbs breadcrumbs={store.breadcrumbs} />

        <!-- HERO / HEADER -->
        <section class="mt-4 grid grid-cols-1 md:grid-cols-[auto,1fr] gap-4 md:gap-6 items-start">
          <div class="flex items-center gap-4">
            <div class="shrink-0">
              {store.logo_url ? (
                <img
                  src={store.logo_url}
                  alt={`${store.name} logo`}
                  width="96"
                  height="96"
                  loading="eager"
                  fetchpriority="high"
                  decoding="async"
                  class="h-16 w-16 rounded-xl ring-1 ring-slate-100 object-contain bg-white"
                />
              ) : (
                <div class="h-16 w-16 rounded-xl bg-slate-100 grid place-content-center text-slate-500">Logo</div>
              )}
            </div>
            <div class="min-w-0">
              <h1 class="text-2xl sm:text-3xl font-semibold tracking-tight">
                {store.name} Coupons & Promo Codes
              </h1>
              {store.category_names?.length ? (
                <p class="mt-1 text-slate-600 text-sm sm:text-base">{store.category_names.join(", ")}</p>
              ) : null}
              {typeof store?.stats?.active_coupons === "number" && (
                <p class="mt-1 text-sm text-green-700">{store.stats.active_coupons} active coupons</p>
              )}
            </div>
          </div>

          <!-- AEO Quick Answers -->
          <aside class="rounded-2xl border border-slate-200 bg-slate-50/60 p-4">
            <dl class="grid grid-cols-2 gap-x-6 gap-y-3 text-sm">
              <div>
                <dt class="text-slate-500">Best code today</dt>
                <dd class="font-semibold">{bestCoupon?.discount_text ?? bestCoupon?.title ?? "—"}</dd>
              </div>
              <div>
                <dt class="text-slate-500">Updated</dt>
                <dd class="font-semibold">{formatDate(store?.last_updated) || formatDate(new Date().toISOString())}</dd>
              </div>
              <div>
                <dt class="text-slate-500">Categories</dt>
                <dd class="font-semibold">{store?.category_names?.join(", ") ?? "—"}</dd>
              </div>
              <div>
                <dt class="text-slate-500">Status</dt>
                <dd class="font-semibold">
                  {typeof store?.stats?.active_coupons === "number" && store.stats.active_coupons > 0 ? "Active" : "Updating"}
                </dd>
              </div>
            </dl>
          </aside>
        </section>

        <!-- ABOUT / EEAT -->
        {store.about_html && (
          <section class="mt-6">
            <article class="prose max-w-none">
              <div set:html={store.about_html}></div>
            </article>
          </section>
        )}

        <!-- COUPONS -->
        <section class="mt-8" aria-labelledby="coupons-heading">
          <div class="flex items-center gap-3 border-b border-slate-200">
            <h2 id="coupons-heading" class="py-3 text-xl font-semibold">Top Coupons</h2>
            <span class="rounded-full bg-slate-100 px-2.5 py-1 text-xs text-slate-700">{coupons.length}</span>
          </div>

          {coupons.length > 0 ? (
            <div class="grid-2-equal mt-4">
              {coupons.map((c) => <CardCoupon coupon={c} />)}
            </div>
          ) : (
            <p class="mt-4 text-slate-600">No active coupons at the moment. Check back soon.</p>
          )}

          <Pagination
            prev={store.coupons?.prev}
            next={store.coupons?.next}
            total_pages={store.coupons?.total_pages}
          />
        </section>

        <!-- TRUST / EEAT BOX -->
        <section class="mt-10">
          <div class="rounded-2xl border border-slate-200 p-5 bg-slate-50/60">
            <h3 class="text-base font-semibold">Why Trust This Page</h3>
            <ul class="mt-3 space-y-2 text-sm text-slate-700">
              <li>✅ Human-verified coupons & clear terms</li>
              <li>⚡ Near real-time refresh from source</li>
              <li>🔒 Safe outlinks (<code>rel="sponsored"</code> + <code>noopener</code>)</li>
              <li>♻️ Expired offers are removed promptly</li>
            </ul>
            <p class="mt-4 text-xs text-slate-500">
              Last updated: <time dateTime={updated.toISOString()}>{updated.toLocaleDateString()}</time>
            </p>
          </div>
        </section>

        <!-- RELATED STORES (Query fan-out) -->
        {store.related_stores && store.related_stores.length > 0 && (
          <section class="mt-12" aria-labelledby="related-heading">
            <h2 id="related-heading" class="text-xl font-semibold mb-4">Related Stores</h2>
            <div class="grid-3-equal">
              {store.related_stores.map((rs) => <CardStore store={rs} />)}
            </div>
          </section>
        )}
      </>
    ) : (
      <section class="py-20 text-center">
        <h1 class="text-2xl font-bold">Store not found</h1>
        <p class="text-gray-600 mt-2">Please check the URL or browse all stores.</p>
        <div class="mt-4">
          <a href="/stores" class="btn btn-outline">Back to Stores</a>
        </div>
      </section>
    )}
  </main>

  {/* Local JSON-LD emit (kept even if Base already injects) */}
  {jsonldList?.length ? (
    <Fragment slot="head">
      {jsonldList.map((node) => (
        <script type="application/ld+json">
          {JSON.stringify(node)}
        </script>
      ))}
    </Fragment>
  ) : null}

  <Footer />
</Base>
