---
export const prerender = true;

/* src/pages/index.astro — full frontmatter (DROP-IN, preserves pageMeta + imports) */
import Base from "../layouts/Base.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import CouponRevealIsland from "../components/islands/CouponRevealIsland.astro";
import CardStore from "../components/CardStore.astro";
// removed runtime api import - using build-time/static files instead
import LandingSubscribeIsland from "../components/islands/LandingSubscribeIsland.jsx";
import TestimonialsList from "../components/TestimonialsList";
import { SAMPLE_TESTIMONIALS } from "../content/testimonials.sample";
import banners from "../content/banners.server";

const firstBanner = banners[0]; // LCP hero = first slide

const pageMeta = {
  title: "Saving Harbor | Verified Coupons & Discounts",
  description:
    "Verified coupons, real savings, no expired junk — handpicked by real humans.",

  // auto preload from first banner
  preloadHero: true,
  heroSrc: firstBanner.variants.avif[2], // largest AVIF (1600w)
  heroSrcSetAvif: firstBanner.variants.avif
    .map((src, i) => `${src} ${[320, 768, 1600][i]}w`)
    .join(", "),
  heroSrcSetWebp: firstBanner.variants.webp
    .map((src, i) => `${src} ${[320, 768, 1600][i]}w`)
    .join(", "),
};

type Store = {
  id: string | number;
  name: string;
  slug: string;
  logo_url?: string | null;
  stats?: { active_coupons?: number };
};
type StoresResponse = { data: Store[]; meta: any };

type Coupon = {
  id: string | number;
  title?: string | null;
  code?: string | null;
  ends_at?: string | null;
  merchant_name?: string | null;
};
type CouponsResponse = { data: Coupon[]; meta: any };

// server-safe file reads (deterministic at build time)
import fs from "fs/promises";
import path from "path";

async function readStaticFile(filename: string) {
  try {
    const full = path.join(process.cwd(), "public", "_data", filename);
    const raw = await fs.readFile(full, "utf-8");
    return JSON.parse(raw);
  } catch (e) {
    return { data: [], meta: {} };
  }
}

// browser-safe fetch fallback (only used if this code runs client-side)
async function fetchFallback(url: string) {
  try {
    const res = await fetch(url);
    if (!res.ok) return { data: [], meta: {} };
    return await res.json();
  } catch {
    return { data: [], meta: {} };
  }
}

let resp = { data: [], meta: {} },
  cresp = { data: [], meta: {} };

try {
  // prefer reading from disk (build / prerender)
  const [homeFile, couponsFile] = await Promise.all([
    readStaticFile("home.json"),
    readStaticFile("coupons.json"),
  ]);

  // support combined payloads (home.json containing stores+coupons)
  if (homeFile && (homeFile.stores || homeFile.coupons)) {
    const h = homeFile;
    resp = {
      data: Array.isArray(h.stores) ? h.stores : h.stores?.data || [],
      meta: h.meta || {},
    };
    cresp = {
      data: Array.isArray(h.coupons) ? h.coupons : h.coupons?.data || [],
      meta: h.meta || {},
    };
  } else {
    resp = {
      data: Array.isArray(homeFile.data)
        ? homeFile.data
        : homeFile.stores || [],
      meta: homeFile.meta || {},
    };
    cresp = {
      data: Array.isArray(couponsFile.data)
        ? couponsFile.data
        : couponsFile.coupons || [],
      meta: couponsFile.meta || {},
    };
  }

  // If running client-side and files were empty, attempt fetch fallback
  const likelyEmpty = (arr: any) =>
    !arr || (Array.isArray(arr) && arr.length === 0);
  if (
    typeof window !== "undefined" &&
    likelyEmpty(resp.data) &&
    likelyEmpty(cresp.data)
  ) {
    const [hf, cf] = await Promise.all([
      fetchFallback("/_data/home.json"),
      fetchFallback("/_data/coupons.json"),
    ]);
    resp = {
      data: Array.isArray(hf.data) ? hf.data : hf.stores || [],
      meta: hf.meta || {},
    };
    cresp = {
      data: Array.isArray(cf.data) ? cf.data : cf.coupons || [],
      meta: cf.meta || {},
    };
  }
} catch (e) {
  resp = { data: [], meta: {} };
  cresp = { data: [], meta: {} };
}

const stores = resp?.data || [];
const coupons = cresp?.data || [];
const meta = resp?.meta || {};
const cmeta = cresp?.meta || {};

// average rating calculation (unchanged)
const avg =
  SAMPLE_TESTIMONIALS.reduce((s, t) => s + (t.rating || 0), 0) /
    SAMPLE_TESTIMONIALS.length || null;
---

<Base meta={pageMeta}>
  <Header />
  <main class="container mx-auto px-4 py-10">
    <!-- Hero -->
    <section class="mx-auto max-w-3xl text-center">
      <h1
        class="text-5xl md:text-6xl font-bold tracking-tight text-brand-primary"
      >
        Saving Harbor...
      </h1>
      <h2
        class="text-2xl md:text-3xl font-bold tracking-tight text-brand-primary"
      >
        Your trusted source for verified coupons & discounts.
      </h2>
      <p class="mt-3 text-gray-700">
        Save on top brands with codes we test ourselves.
      </p>
    </section>

    <!-- ---------- Banner (production-ready drop-in) ---------- -->
    <link
      rel="preload"
      as="image"
      href={pageMeta.heroSrc}
      imagesrcset={pageMeta.heroSrcSetAvif}
      imagesizes="(max-width:640px) 100vw, 1200px"
      fetchpriority="high"
    />

    <div
      id="hero-wrap"
      class="mt-8 relative mx-auto max-w-6xl rounded-lg overflow-hidden"
    >
      <!-- static LCP image (display size matches slider container) -->
      <div
        id="hero-static"
        class="relative w-full aspect-[16/5] bg-gray-100 z-10"
      >
        <picture>
          <source
            type="image/avif"
            srcset={pageMeta.heroSrcSetAvif}
            sizes="(max-width:640px) 100vw, 1200px"
          />
          <source
            type="image/webp"
            srcset={pageMeta.heroSrcSetWebp}
            sizes="(max-width:640px) 100vw, 1200px"
          />
          <img
            src={pageMeta.heroSrc}
            alt={firstBanner.alt}
            loading="eager"
            fetchpriority="high"
            decoding="async"
            width="1200"
            height="375"
            class="absolute inset-0 w-full h-full object-cover object-center"
          />
        </picture>
      </div>

      <!-- slider will mount on top; keep as sibling so we don't remove it accidentally -->
      <div id="hero-slider-mount" class="absolute inset-0 w-full h-full z-20">
      </div>
    </div>

    <script type="module" is:inline>
      (async function () {
        const doHydrate = async () => {
          try {
            // ---------- fetch banners (allow normal HTTP caching) ----------
            let banners = [];
            try {
              const r = await fetch("/_data/banners.json"); // allow browser cache
              if (r.ok) banners = await r.json();
            } catch (e) {
              console.error("fetch banners failed", e);
            }

            if (!banners || banners.length === 0) return;

            // ---------- ensure mount exists and is sibling ----------
            const heroWrap = document.getElementById("hero-wrap");
            const heroStatic = document.getElementById("hero-static");
            let mountWrapper = document.getElementById("hero-slider-mount");
            if (!mountWrapper && heroWrap) {
              mountWrapper = document.createElement("div");
              mountWrapper.id = "hero-slider-mount";
              mountWrapper.className = "absolute inset-0 w-full h-full z-20";
              heroWrap.appendChild(mountWrapper);
            }
            if (!mountWrapper) return;

            if (heroStatic && heroStatic.contains(mountWrapper)) {
              heroStatic.parentNode.insertBefore(
                mountWrapper,
                heroStatic.nextSibling
              );
            }

            // ---------- inject small CSS to improve touch targets & ensure bullets size ----------
            if (!document.getElementById("hero-swiper-inline-styles")) {
              const style = document.createElement("style");
              style.id = "hero-swiper-inline-styles";
              style.textContent = `
            /* Improve swiper controls hit area */
            .swiper-pagination-bullet { width: 16px; height: 16px; margin: 8px; border-radius: 9999px; }
            .swiper-button-next, .swiper-button-prev { padding: 8px; min-width:44px; min-height:44px; display:flex; align-items:center; justify-content:center; }
            .swiper { --swiper-navigation-size: 44px; }
            /* keep static image visible until init fades it */
            #hero-static { transition: opacity 220ms ease; }
          `;
              document.head.appendChild(style);
            }

            // ---------- preload then apply Swiper CSS (non-blocking) ----------
            const cssHref =
              "https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css";
            if (
              ![...document.styleSheets].some(
                (s) => s.href && s.href.includes("swiper-bundle.min.css")
              )
            ) {
              const pre = document.createElement("link");
              pre.rel = "preload";
              pre.as = "style";
              pre.href = cssHref;
              pre.crossOrigin = "";
              pre.onload = () => {
                pre.rel = "stylesheet";
              };
              pre.onerror = () => {
                // fallback: insert regular stylesheet if preload fails
                const l = document.createElement("link");
                l.rel = "stylesheet";
                l.href = cssHref;
                l.crossOrigin = "";
                document.head.appendChild(l);
              };
              document.head.appendChild(pre);
            }

            // ---------- build slider DOM safely (no innerHTML) ----------
            const sliderRoot = document.createElement("div");
            sliderRoot.className =
              "swiper rounded-lg overflow-hidden shadow-lg border border-gray-100";

            const wrapper = document.createElement("div");
            wrapper.className = "swiper-wrapper";
            sliderRoot.appendChild(wrapper);

            const prevBtn = document.createElement("div");
            prevBtn.className = "swiper-button-prev";
            prevBtn.setAttribute("aria-label", "Previous slide");
            prevBtn.setAttribute("role", "button");
            prevBtn.tabIndex = 0;
            sliderRoot.appendChild(prevBtn);

            const nextBtn = document.createElement("div");
            nextBtn.className = "swiper-button-next";
            nextBtn.setAttribute("aria-label", "Next slide");
            nextBtn.setAttribute("role", "button");
            nextBtn.tabIndex = 0;
            sliderRoot.appendChild(nextBtn);

            const pagination = document.createElement("div");
            pagination.className = "swiper-pagination";
            sliderRoot.appendChild(pagination);

            mountWrapper.appendChild(sliderRoot);

            // ---------- append slides (create elements for safety) ----------
            const widths = [320, 768, 1600];
            banners.forEach((b, idx) => {
              const slide = document.createElement("div");
              slide.className = "swiper-slide";

              const outer = document.createElement("div");
              outer.className = "relative w-full aspect-[16/5] bg-gray-100";

              const picture = document.createElement("picture");

              // avif sources
              if (b.variants && b.variants.avif && b.variants.avif.length) {
                const srcset = b.variants.avif
                  .map((u, i) => `${u} ${widths[i] || widths[2]}w`)
                  .join(", ");
                const s = document.createElement("source");
                s.type = "image/avif";
                s.setAttribute("srcset", srcset);
                s.setAttribute("sizes", "(max-width:640px) 100vw, 1200px");
                picture.appendChild(s);
              }

              // webp sources
              if (b.variants && b.variants.webp && b.variants.webp.length) {
                const srcset = b.variants.webp
                  .map((u, i) => `${u} ${widths[i] || widths[2]}w`)
                  .join(", ");
                const s = document.createElement("source");
                s.type = "image/webp";
                s.setAttribute("srcset", srcset);
                s.setAttribute("sizes", "(max-width:640px) 100vw, 1200px");
                picture.appendChild(s);
              }

              const img = document.createElement("img");
              img.src =
                b.variants && b.variants.fallback
                  ? b.variants.fallback
                  : b.src || "";
              img.alt = b.alt || "";
              img.loading = idx === 0 ? "eager" : "lazy";
              if (idx === 0) img.setAttribute("fetchpriority", "high");
              img.decoding = "async";
              img.width = 1600;
              img.height = 500;
              img.className =
                "absolute inset-0 w-full h-full object-cover object-center";
              img.style.aspectRatio = "1600/500";

              picture.appendChild(img);
              outer.appendChild(picture);
              slide.appendChild(outer);
              wrapper.appendChild(slide);
            });

            // ---------- load Swiper JS from CDN (async) ----------
            await new Promise((resolve, reject) => {
              if (window.Swiper) return resolve();
              const s = document.createElement("script");
              s.src =
                "https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js";
              s.async = true;
              s.crossOrigin = "";
              s.onload = () => resolve();
              s.onerror = (e) => {
                console.error("swiper script load failed", e);
                reject(e);
              };
              document.head.appendChild(s);
            });

            // ---------- initialize Swiper with accessibility and pagination config ----------
            try {
              const swiper = new window.Swiper(sliderRoot, {
                slidesPerView: 1,
                loop: true,
                autoplay: { delay: 5000, disableOnInteraction: false },
                navigation: { nextEl: nextBtn, prevEl: prevBtn },
                pagination: { el: pagination, clickable: true },
                a11y: {
                  enabled: true,
                  prevSlideMessage: "Previous slide",
                  nextSlideMessage: "Next slide",
                },
                on: {
                  init() {
                    // fade out static image after next frame to ensure paint
                    requestAnimationFrame(() => {
                      const s = document.getElementById("hero-static");
                      if (s) {
                        s.style.opacity = "0";
                        s.style.pointerEvents = "none";
                      }
                    });
                  },
                },
              });

              // ensure pagination bullets have accessible labels (Swiper may create them)
              // add labels shortly after init (guard with timeout)
              setTimeout(() => {
                const bullets = pagination.querySelectorAll(
                  ".swiper-pagination-bullet"
                );
                bullets.forEach((bEl, i) => {
                  if (!bEl.getAttribute("aria-label"))
                    bEl.setAttribute("aria-label", `Go to slide ${i + 1}`);
                  bEl.tabIndex = 0;
                });
              }, 50);
            } catch (e) {
              console.error("swiper init failed", e);
            }

            // ---------- safety timeout: if slider never initializes, unhide static after 3s ----------
            setTimeout(() => {
              const s = document.getElementById("hero-static");
              if (
                s &&
                s.style.opacity !== "0" &&
                !document.querySelector(".swiper-slide")
              ) {
                // leave static visible but remove any pointer-blocking
                s.style.pointerEvents = "auto";
              }
            }, 3000);
          } catch (err) {
            console.error("banner hydrate error", err);
          }
        };

        if ("requestIdleCallback" in window)
          requestIdleCallback(doHydrate, { timeout: 800 });
        else setTimeout(doHydrate, 800);
      })();
    </script>

    <!-- ---------- end banner block ---------- -->

    <!-- Stores -->
    <div class="mt-10">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-brand-secondary">Stores</h2>
        <a href="/stores" class="btn btn-outline" aria-label="View all stores"
          >View all →</a
        >
      </div>

      <section>
        {
          stores.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
              {stores.map((store: any) => (
                <div
                  class="rounded-md bg-white/5 p-3 transition-shadow hover:shadow-store-card"
                  style="border-top-width: 3px; border-top-style: solid; border-top-color: transparent;"
                >
                  {/* Keep CardStore component exactly as-is */}
                  <CardStore store={store} />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">No stores found.</p>
          )
        }
      </section>
    </div>

    <!-- Coupons -->
    <div class="mt-10">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-brand-secondary">Coupons</h2>
        <a
          href="/coupons"
          class="btn btn-outline"
          aria-label="Explore more coupons">Explore more →</a
        >
      </div>

      <section>
        {
          coupons.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
              {coupons.map((c: Coupon) => (
                <div
                  class="rounded-md bg-white/5 p-3 transition-shadow hover:shadow-store-card"
                  style="border-top-width: 3px; border-top-style: solid; border-top-color: transparent;"
                >
                  <CouponRevealIsland
                    client:idle
                    coupon={c}
                    storeSlug={c.merchant_name}
                  />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">
              No coupons available right now. Check back soon.
            </p>
          )
        }
      </section>
    </div>

    <!-- Testimonials -->
    <TestimonialsList
      items={SAMPLE_TESTIMONIALS}
      avgRating={avg}
      totalReviews={SAMPLE_TESTIMONIALS.length}
    />

    <!-- Newsletter / CTA -->
    <!-- Newsletter / CTA — darken overlay approach -->
    <section class="relative mt-16 rounded-xl overflow-hidden">
      <!-- background brand color (kept as the source of truth) -->
      <div class="absolute inset-0 bg-brand-primary" aria-hidden="true"></div>

      <!-- dark overlay that increases contrast for white text -->
      <div class="absolute inset-0 bg-black/25" aria-hidden="true"></div>

      <!-- content sits above the overlays -->
      <div
        class="relative z-10 p-6 text-center text-white"
        aria-labelledby="newsletter-cta-heading"
      >
        <h2 id="newsletter-cta-heading" class="text-white font-semibold">
          Subscribe and stay ahead — no spam, ever.
        </h2>
        <p class="mt-2 text-white font-medium">
          Get the best deals delivered weekly.
        </p>
        <LandingSubscribeIsland client:idle />
      </div>
    </section>
  </main>

  <Footer />
</Base>
