---
/* src/pages/index.astro — frontmatter (DROP-IN REPLACEMENT) */
import Base from "../layouts/Base.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import BannerSlider from "../components/BannerSlider.jsx";
import CouponRevealIsland from "../components/islands/CouponRevealIsland.astro";
import CardStore from "../components/CardStore.astro";
// removed runtime api import - using build-time/static files instead
import LandingSubscribeIsland from "../components/islands/LandingSubscribeIsland.jsx";
import TestimonialsList from "../components/TestimonialsList";
import { SAMPLE_TESTIMONIALS } from "../content/testimonials.sample";

const pageMeta = {
  title: "Saving Harbor | Verified Coupons & Discounts",
  description:
    "Verified coupons, real savings, no expired junk — handpicked by real humans.",
  // LCP hero preload
  preloadHero: true,
  heroSrc: "/optimized/banner1-1600.webp",
  // fonts to preload (self-hosted .woff2 recommended)
  preloadFonts: [{ href: "/fonts/Inter-Variable.woff2", type: "font/woff2" }],
};

type Store = {
  id: string | number;
  name: string;
  slug: string;
  logo_url?: string | null;
  stats?: { active_coupons?: number };
};
type StoresResponse = { data: Store[]; meta: any };

type Coupon = {
  id: string | number;
  title?: string | null;
  code?: string | null;
  ends_at?: string | null;
  merchant_name?: string | null;
};
type CouponsResponse = { data: Coupon[]; meta: any };

/*
  Fetch strategy:
  - Read static JSON files produced during build: public/_data/home.json and public/_data/coupons.json
  - These are created by the build script `scripts/fetch-home.js` (run during build)
  - Files are allowed to be missing; we fall back to empty arrays to ensure build never fails
*/

let resp = null,
  cresp = null;

async function safeRead(url: string) {
  try {
    const res = await fetch(new URL(url, import.meta.env.SITE).href);
    if (!res.ok) return { data: [], meta: {} };
    return await res.json();
  } catch (e) {
    return { data: [], meta: {} };
  }
}

try {
  // read combined home payload (if you saved both stores+coupons together)
  const home = await safeRead("/_data/home.json");
  // some fetch scripts may write a single file with { stores, coupons } shape
  // normalise both possibilities:
  if (home && (home.stores || home.coupons)) {
    resp = { data: Array.isArray(home.stores) ? home.stores : home.stores?.data || [], meta: home.meta || {} };
    cresp = { data: Array.isArray(home.coupons) ? home.coupons : home.coupons?.data || [], meta: home.meta || {} };
  } else {
    // try separate files
    const storesFile = await safeRead("/_data/home.json");
    const couponsFile = await safeRead("/_data/coupons.json");
    resp = { data: Array.isArray(storesFile.data) ? storesFile.data : storesFile.stores || [], meta: storesFile.meta || {} };
    cresp = { data: Array.isArray(couponsFile.data) ? couponsFile.data : couponsFile.coupons || [], meta: couponsFile.meta || {} };
  }
} catch (err) {
  // guaranteed fallback to empty arrays
  resp = { data: [], meta: {} };
  cresp = { data: [], meta: {} };
}

const stores = resp?.data || [];
const coupons = cresp?.data || [];
const meta = resp?.meta || {};
const cmeta = cresp?.meta || {};

// average rating calculation (kept as-is)
const avg =
  SAMPLE_TESTIMONIALS.reduce((s, t) => s + (t.rating || 0), 0) / SAMPLE_TESTIMONIALS.length || null;
---


<Base meta={pageMeta}>
  <Header />
  <main class="container mx-auto px-4 py-10">
    <!-- Hero -->
    <section class="mx-auto max-w-3xl text-center">
      <h1
        class="text-5xl md:text-6xl font-bold tracking-tight text-brand-primary"
      >
        Saving Harbor...
      </h1>
      <h2
        class="text-2xl md:text-3xl font-bold tracking-tight text-brand-primary"
      >
        Your trusted source for verified coupons & discounts.
        <!-- Your safe harbor for savings — reliable coupons, verified deals. -->
      </h2>
      <p class="mt-3 text-gray-400">
        Save on top brands with codes we test ourselves.
      </p>

      <!-- <div class="mt-6 flex flex-col sm:flex-row gap-3 justify-center">
        <a href="/coupons" class="btn btn-primary"> Browse Coupons </a>
        <a href="/stores" class="btn btn-outline"> Explore Stores </a>
      </div> -->
    </section>

    <!-- Banner -->
    <div class="mt-8">
      <!-- server-side hero fallback for LCP  -->
      <div class="hero-placeholder"></div>
      <!-- interactive slider mounts here; it should use the same image sources for slide #1 -->
      <BannerSlider client:visible />
    </div>

    <!-- Stores -->
    <div class="mt-10">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-brand-secondary">Stores</h2>
        <a href="/stores" class="btn btn-outline" aria-label="View all stores"
          >View all →</a
        >
      </div>

      <section>
        {
          stores.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
              {stores.map((store: any) => (
                <div
                  class="rounded-md bg-white/5 p-3 transition-shadow hover:shadow-store-card"
                  style="border-top-width: 3px; border-top-style: solid; border-top-color: transparent;"
                >
                  {/* Keep CardStore component exactly as-is */}
                  <CardStore store={store} />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">No stores found.</p>
          )
        }
      </section>
    </div>

    <!-- Coupons -->
    <div class="mt-10">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-brand-secondary">Coupons</h2>
        <a
          href="/coupons"
          class="btn btn-outline"
          aria-label="Explore more coupons">Explore more →</a
        >
      </div>

      <section>
        {
          coupons.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
              {coupons.map((c: Coupon) => (
                <div
                  class="rounded-md bg-white/5 p-3 transition-shadow hover:shadow-store-card"
                  style="border-top-width: 3px; border-top-style: solid; border-top-color: transparent;"
                >
                  <CouponRevealIsland
                    client:idle
                    coupon={c}
                    storeSlug={c.merchant_name}
                  />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">
              No coupons available right now. Check back soon.
            </p>
          )
        }
      </section>
    </div>

    <!-- Testimonials -->
    <TestimonialsList
      items={SAMPLE_TESTIMONIALS}
      avgRating={avg}
      totalReviews={SAMPLE_TESTIMONIALS.length}
    />

    <!-- Newsletter / CTA -->
    <section
      class="mt-16 bg-brand-primary text-white rounded-xl p-6 text-center shadow-md"
    >
      <h2 class="text-xl font-semibold">
        Subscribe and stay ahead — no spam, ever.
      </h2>
      <p class="mt-2 opacity-90">Get the best deals delivered weekly.</p>
      <LandingSubscribeIsland client:load />
    </section>
  </main>

  <Footer />
</Base>
