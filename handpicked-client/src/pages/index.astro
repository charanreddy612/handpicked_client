---
export const prerender = true;

/* src/pages/index.astro — full frontmatter (DROP-IN, preserves pageMeta + imports) */
import Base from "../layouts/Base.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import CouponRevealIsland from "../components/islands/CouponRevealIsland.astro";
import CardStore from "../components/CardStore.astro";
// removed runtime api import - using build-time/static files instead
import LandingSubscribeIsland from "../components/islands/LandingSubscribeIsland.jsx";
import TestimonialsList from "../components/TestimonialsList";
import { SAMPLE_TESTIMONIALS } from "../content/testimonials.sample";
import banners from "../content/banners.server";

const firstBanner = banners[0]; // LCP hero = first slide

const pageMeta = {
  title: "Saving Harbor | Verified Coupons & Discounts",
  description:
    "Verified coupons, real savings, no expired junk — handpicked by real humans.",

  // auto preload from first banner
  preloadHero: true,
  heroSrc: firstBanner.variants.avif[2], // largest AVIF (1600w)
  heroSrcSetAvif: firstBanner.variants.avif
    .map((src, i) => `${src} ${[320, 768, 1600][i]}w`)
    .join(", "),
  heroSrcSetWebp: firstBanner.variants.webp
    .map((src, i) => `${src} ${[320, 768, 1600][i]}w`)
    .join(", "),
};

type Store = {
  id: string | number;
  name: string;
  slug: string;
  logo_url?: string | null;
  stats?: { active_coupons?: number };
};
type StoresResponse = { data: Store[]; meta: any };

type Coupon = {
  id: string | number;
  title?: string | null;
  code?: string | null;
  ends_at?: string | null;
  merchant_name?: string | null;
};
type CouponsResponse = { data: Coupon[]; meta: any };

// server-safe file reads (deterministic at build time)
import fs from "fs/promises";
import path from "path";

async function readStaticFile(filename: string) {
  try {
    const full = path.join(process.cwd(), "public", "_data", filename);
    const raw = await fs.readFile(full, "utf-8");
    return JSON.parse(raw);
  } catch (e) {
    return { data: [], meta: {} };
  }
}

// browser-safe fetch fallback (only used if this code runs client-side)
async function fetchFallback(url: string) {
  try {
    const res = await fetch(url);
    if (!res.ok) return { data: [], meta: {} };
    return await res.json();
  } catch {
    return { data: [], meta: {} };
  }
}

let resp = { data: [], meta: {} },
  cresp = { data: [], meta: {} };

try {
  // prefer reading from disk (build / prerender)
  const [homeFile, couponsFile] = await Promise.all([
    readStaticFile("home.json"),
    readStaticFile("coupons.json"),
  ]);

  // support combined payloads (home.json containing stores+coupons)
  if (homeFile && (homeFile.stores || homeFile.coupons)) {
    const h = homeFile;
    resp = {
      data: Array.isArray(h.stores) ? h.stores : h.stores?.data || [],
      meta: h.meta || {},
    };
    cresp = {
      data: Array.isArray(h.coupons) ? h.coupons : h.coupons?.data || [],
      meta: h.meta || {},
    };
  } else {
    resp = {
      data: Array.isArray(homeFile.data)
        ? homeFile.data
        : homeFile.stores || [],
      meta: homeFile.meta || {},
    };
    cresp = {
      data: Array.isArray(couponsFile.data)
        ? couponsFile.data
        : couponsFile.coupons || [],
      meta: couponsFile.meta || {},
    };
  }

  // If running client-side and files were empty, attempt fetch fallback
  const likelyEmpty = (arr: any) =>
    !arr || (Array.isArray(arr) && arr.length === 0);
  if (
    typeof window !== "undefined" &&
    likelyEmpty(resp.data) &&
    likelyEmpty(cresp.data)
  ) {
    const [hf, cf] = await Promise.all([
      fetchFallback("/_data/home.json"),
      fetchFallback("/_data/coupons.json"),
    ]);
    resp = {
      data: Array.isArray(hf.data) ? hf.data : hf.stores || [],
      meta: hf.meta || {},
    };
    cresp = {
      data: Array.isArray(cf.data) ? cf.data : cf.coupons || [],
      meta: cf.meta || {},
    };
  }
} catch (e) {
  resp = { data: [], meta: {} };
  cresp = { data: [], meta: {} };
}

const stores = resp?.data || [];
const coupons = cresp?.data || [];
const meta = resp?.meta || {};
const cmeta = cresp?.meta || {};

// average rating calculation (unchanged)
const avg =
  SAMPLE_TESTIMONIALS.reduce((s, t) => s + (t.rating || 0), 0) /
    SAMPLE_TESTIMONIALS.length || null;
---

<Base meta={pageMeta}>
  <Header />
  <main class="container mx-auto px-4 py-10">
    <!-- Hero -->
    <section class="mx-auto max-w-3xl text-center">
      <h1
        class="text-5xl md:text-6xl font-bold tracking-tight text-brand-primary"
      >
        Saving Harbor...
      </h1>
      <h2
        class="text-2xl md:text-3xl font-bold tracking-tight text-brand-primary"
      >
        Your trusted source for verified coupons & discounts.
      </h2>
      <p class="mt-3 text-gray-700">
        Save on top brands with codes we test ourselves.
      </p>
    </section>

    <!-- ---------- Banner (production-ready drop-in) ---------- -->
    <link
      rel="preload"
      as="image"
      href={pageMeta.heroSrc}
      imagesrcset={pageMeta.heroSrcSetAvif}
      imagesizes="(max-width:640px) 100vw, 1200px"
      fetchpriority="high"
    />

    <div
      id="hero-wrap"
      class="mt-8 relative mx-auto max-w-6xl rounded-lg overflow-hidden"
    >
      <!-- static LCP image (display size matches slider container) -->
      <div
        id="hero-static"
        class="relative w-full aspect-[16/5] bg-gray-100 z-10"
      >
        <picture>
          <source
            type="image/avif"
            srcset={pageMeta.heroSrcSetAvif}
            sizes="(max-width:640px) 100vw, 1200px"
          />
          <source
            type="image/webp"
            srcset={pageMeta.heroSrcSetWebp}
            sizes="(max-width:640px) 100vw, 1200px"
          />
          <img
            src={pageMeta.heroSrc}
            alt={firstBanner.alt}
            loading="eager"
            fetchpriority="high"
            decoding="async"
            width="1200"
            height="375"
            class="absolute inset-0 w-full h-full object-cover object-center"
          />
        </picture>
      </div>

      <!-- slider will mount on top; keep as sibling so we don't remove it accidentally -->
      <div id="hero-slider-mount" class="absolute inset-0 w-full h-full z-20">
      </div>
    </div>

    <script type="module" is:inline>
      (async function () {
        // ----- configuration (NO CDN urls here) -----
        const HERO_SELECTOR = "#hero-wrap";
        const MOUNT_ID = "hero-slider-mount";
        const CSS_STYLE_ID = "hero-swiper-inline-styles";

        // ----- low-bandwidth / save-data guard -----
        function isNetworkConstrained() {
          try {
            const nav = navigator.connection || {};
            if (nav.saveData) return true;
            if (nav.effectiveType && /2g|slow-2g/.test(nav.effectiveType))
              return true;
          } catch (e) {}
          return false;
        }

        // ----- minimal inline styles for controls (safe, cheap) -----
        function injectInlineStyles() {
          if (document.getElementById(CSS_STYLE_ID)) return;
          const style = document.createElement("style");
          style.id = CSS_STYLE_ID;
          style.textContent = `
        /* touch-friendly pagination hit area — visual dot can be smaller via ::before */
        .swiper-pagination-bullet { width: 44px; height: 44px; margin: 8px; border-radius: 9999px; display:inline-flex; align-items:center; justify-content:center; }
        .swiper-pagination-bullet::before { content:""; width:10px; height:10px; border-radius:9999px; background:currentColor; display:block; opacity:.9; }
        .swiper-button-next, .swiper-button-prev { padding: 8px; min-width:44px; min-height:44px; display:flex; align-items:center; justify-content:center; }
        .swiper { --swiper-navigation-size: 44px; }
        #hero-static { transition: opacity 220ms ease; }
      `;
          document.head.appendChild(style);
        }

        // ----- create mount wrapper lazily (no Swiper init here) -----
        function ensureMountWrapper() {
          const heroWrap = document.getElementById("hero-wrap");
          if (!heroWrap) return null;
          let mountWrapper = document.getElementById(MOUNT_ID);
          if (!mountWrapper) {
            mountWrapper = document.createElement("div");
            mountWrapper.id = MOUNT_ID;
            mountWrapper.className = "absolute inset-0 w-full h-full z-20";
            heroWrap.appendChild(mountWrapper);
          }
          const heroStatic = document.getElementById("hero-static");
          if (heroStatic && heroStatic.contains(mountWrapper)) {
            heroStatic.parentNode.insertBefore(
              mountWrapper,
              heroStatic.nextSibling
            );
          }
          return mountWrapper;
        }

        // ----- fetch banners (only when needed) -----
        async function fetchBanners() {
          try {
            const r = await fetch("/_data/banners.json");
            if (r.ok) return await r.json();
          } catch (e) {
            console.error("fetch banners failed", e);
          }
          return [];
        }

        // ----- build static slides DOM (no swiper init) -----
        function buildStaticSlides(mountWrapper, banners) {
          // build a simple, accessible static carousel shell so CSS and BannerSlider can reuse it
          const root = document.createElement("div");
          root.className =
            "hero-static-slides rounded-lg overflow-hidden shadow-lg border border-gray-100";

          const inner = document.createElement("div");
          inner.className = "hero-static-wrapper";
          root.appendChild(inner);

          banners.forEach((b, idx) => {
            const slide = document.createElement("div");
            slide.className = "hero-static-slide";
            slide.setAttribute("role", "group");
            slide.setAttribute("aria-roledescription", "slide");
            slide.setAttribute("aria-label", b.alt || `Slide ${idx + 1}`);

            const picture = document.createElement("picture");
            if (b.variants && b.variants.avif && b.variants.avif.length) {
              const s = document.createElement("source");
              s.type = "image/avif";
              s.srcset = b.variants.avif
                .map((u, i) => `${u} ${[320, 768, 1600][i] || 1600}w`)
                .join(", ");
              s.sizes = "(max-width:640px) 100vw, 1200px";
              picture.appendChild(s);
            }
            if (b.variants && b.variants.webp && b.variants.webp.length) {
              const s2 = document.createElement("source");
              s2.type = "image/webp";
              s2.srcset = b.variants.webp
                .map((u, i) => `${u} ${[320, 768, 1600][i] || 1600}w`)
                .join(", ");
              s2.sizes = "(max-width:640px) 100vw, 1200px";
              picture.appendChild(s2);
            }
            const img = document.createElement("img");
            img.src = b.variants?.fallback || b.src || "";
            img.alt = b.alt || "";
            img.loading = idx === 0 ? "eager" : "lazy";
            if (idx === 0) img.setAttribute("fetchpriority", "high");
            img.decoding = "async";
            img.width = 1600;
            img.height = 500;
            img.className =
              "absolute inset-0 w-full h-full object-cover object-center";
            img.style.aspectRatio = "1600/500";
            picture.appendChild(img);

            slide.appendChild(picture);
            inner.appendChild(slide);
          });

          mountWrapper.appendChild(root);
          return root;
        }

        // ----- initIfNeeded: do NOT import any Swiper CDN/module here -----
        async function initIfNeeded() {
          // ensure this runs only once
          if (window.__heroInitDone) return;
          window.__heroInitDone = true;

          // Respect save-data and very slow networks: do nothing in that case (BannerSlider can fallback)
          if (isNetworkConstrained()) {
            console.log(
              "Network constrained or Save-Data enabled — skipping hero auto-init."
            );
            return;
          }

          // cheap style injection
          injectInlineStyles();

          // fetch banners and create static shell (no JS carousel)
          const banners = await fetchBanners();
          if (!banners || banners.length === 0) return;

          const mountWrapper = ensureMountWrapper();
          if (!mountWrapper) return;

          // build a static DOM the React BannerSlider can optionally enhance
          buildStaticSlides(mountWrapper, banners);

          // Instead of loading Swiper from CDN, ask the React BannerSlider to initialize itself.
          // BannerSlider exposes window.__triggerHeroSliderInit when it mounts.
          if (typeof window.__triggerHeroSliderInit === "function") {
            try {
              window.__triggerHeroSliderInit();
            } catch (e) {
              // ignore - BannerSlider may not be ready yet
            }
          }

          // do NOT load or import any swiper script or css here.
        }

        // ----- triggers: intersection or interaction or idle fallback -----
        const heroEl = document.querySelector(HERO_SELECTOR);

        const userInteractionHandler = () => {
          removeInteractionListeners();
          initIfNeeded();
        };
        function addInteractionListeners() {
          window.addEventListener("scroll", userInteractionHandler, {
            passive: true,
            once: true,
          });
          window.addEventListener("mousemove", userInteractionHandler, {
            once: true,
          });
          window.addEventListener("touchstart", userInteractionHandler, {
            once: true,
          });
          window.addEventListener("keydown", userInteractionHandler, {
            once: true,
          });
        }
        function removeInteractionListeners() {
          window.removeEventListener("scroll", userInteractionHandler);
          window.removeEventListener("mousemove", userInteractionHandler);
          window.removeEventListener("touchstart", userInteractionHandler);
          window.removeEventListener("keydown", userInteractionHandler);
        }

        if (heroEl && "IntersectionObserver" in window) {
          const io = new IntersectionObserver(
            (entries, obs) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  obs.disconnect();
                  removeInteractionListeners();
                  initIfNeeded();
                }
              });
            },
            { rootMargin: "200px" }
          );
          io.observe(heroEl);
          addInteractionListeners();
        } else {
          addInteractionListeners();
          if ("requestIdleCallback" in window)
            requestIdleCallback(initIfNeeded, { timeout: 1200 });
          else setTimeout(initIfNeeded, 1200);
        }

        // expose trigger for other code (keeps old integration points working)
        window.__triggerHeroSliderInit = initIfNeeded;
      })();
    </script>

    <!-- ---------- end banner block ---------- -->

    <!-- Stores -->
    <div class="mt-10">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-brand-secondary">Stores</h2>
        <a href="/stores" class="btn btn-outline" aria-label="View all stores"
          >View all →</a
        >
      </div>

      <section>
        {
          stores.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
              {stores.map((store: any) => (
                <div
                  class="rounded-md bg-white/5 p-3 transition-shadow hover:shadow-store-card"
                  style="border-top-width: 3px; border-top-style: solid; border-top-color: transparent;"
                >
                  {/* Keep CardStore component exactly as-is */}
                  <CardStore store={store} />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">No stores found.</p>
          )
        }
      </section>
    </div>

    <!-- Coupons -->
    <div class="mt-10">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-brand-secondary">Coupons</h2>
        <a
          href="/coupons"
          class="btn btn-outline"
          aria-label="Explore more coupons">Explore more →</a
        >
      </div>

      <section>
        {
          coupons.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
              {coupons.map((c: Coupon) => (
                <div
                  class="rounded-md bg-white/5 p-3 transition-shadow hover:shadow-store-card"
                  style="border-top-width: 3px; border-top-style: solid; border-top-color: transparent;"
                >
                  <CouponRevealIsland
                    client:idle
                    coupon={c}
                    storeSlug={c.merchant_name}
                  />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">
              No coupons available right now. Check back soon.
            </p>
          )
        }
      </section>
    </div>

    <!-- Testimonials -->
    <TestimonialsList
      items={SAMPLE_TESTIMONIALS}
      avgRating={avg}
      totalReviews={SAMPLE_TESTIMONIALS.length}
    />

    <!-- Newsletter / CTA — darken overlay approach -->
    <section class="relative mt-16 rounded-xl overflow-hidden">
      <!-- background brand color (kept as the source of truth) -->
      <div class="absolute inset-0 bg-brand-primary" aria-hidden="true"></div>

      <!-- dark overlay that increases contrast for white text -->
      <div class="absolute inset-0 bg-black/25" aria-hidden="true"></div>

      <!-- content sits above the overlays -->
      <div
        class="relative z-10 p-6 text-center text-white"
        aria-labelledby="newsletter-cta-heading"
      >
        <h2 id="newsletter-cta-heading" class="text-white font-semibold">
          Subscribe and stay ahead — no spam, ever.
        </h2>
        <p class="mt-2 text-white font-medium">
          Get the best deals delivered weekly.
        </p>
        <LandingSubscribeIsland client:idle />
      </div>
    </section>
  </main>

  <Footer />
</Base>
