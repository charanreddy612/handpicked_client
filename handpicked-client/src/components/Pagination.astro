---
import ChevronLeft from "./icons/ChevronLeft.astro";
import ChevronRight from "./icons/ChevronRight.astro";

const {
  prev = null,
  next = null,
  total_pages = undefined,
} = Astro.props as {
  prev?: string | null;
  next?: string | null;
  total_pages?: number;
};

// Read the public env var at build-time and expose to the template
const BACKEND = (import.meta.env.PUBLIC_API_BASE_URL || "").toString().trim().replace(/\/+$/, "");
---

<div class="flex items-center justify-between mt-6" data-backend={BACKEND}>
  <div class="text-sm text-gray-500">
    {
      typeof total_pages === "number" && total_pages > 0
        ? `Total pages: ${total_pages}`
        : ""
    }
  </div>
  <div class="flex items-center gap-2">
    {
      prev ? (
        <a
          href={prev}
          class="flex items-center gap-1 px-3 py-1.5 text-sm rounded border border-brand-primary text-brand-primary hover:bg-brand-primary hover:text-white transition"
        >
          <ChevronLeft size={18} /> Prev
        </a>
      ) : (
        <span class="flex items-center gap-1 px-3 py-1.5 text-sm rounded border border-gray-200 text-gray-400 bg-gray-50 cursor-not-allowed">
          <ChevronLeft size={18} /> Prev
        </span>
      )
    }
    {
      next ? (
        <a
          href={next}
          class="flex items-center gap-1 px-3 py-1.5 text-sm rounded border border-brand-primary text-brand-primary hover:bg-brand-primary hover:text-white transition"
        >
          Next <ChevronRight size={18} />
        </a>
      ) : (
        <span class="flex items-center gap-1 px-3 py-1.5 text-sm rounded border border-gray-200 text-gray-400 bg-gray-50 cursor-not-allowed">
          Next <ChevronRight size={18} />
        </span>
      )
    }
  </div>
</div>

<script is:inline>
  (function () {
    if (typeof window === 'undefined') return;
    try {
      const container = document.querySelector('[data-backend]');
      if (!container) return;
      const backend = container.getAttribute('data-backend') || '';
      if (!backend) return;
      // rewrite any internal /coupons links inside this container to backend origin
      const anchors = container.querySelectorAll('a[href*="/coupons"]');
      anchors.forEach(a => {
        try {
          const u = new URL(a.href, location.origin);
          // only rewrite links that are frontend-hosted (avoid rewriting already-correct backend links)
          if (u.origin === location.origin) {
            const newHref = backend.replace(/\/+$/, '') + u.pathname + u.search;
            a.setAttribute('href', newHref);
          }
        } catch (err) { /* ignore individual parse errors */ }
      });
    } catch (e) {}
  })();
</script>
